---
  - name: Update apt cache if needed
    apt: update_cache=yes cache_valid_time=3600

  - name: Upgrade OS
    apt: upgrade=dist force=yes

  - name: Remove unwanted services
    package:
      name: ['wolfram-engine', 'scratch', 'gnome*', 'gvfs*', 'penguinspuzzle', 'lightdm', 'cups*', 'minecraft-pi']
      state: absent
      purge: yes
      force: yes

  - name: Add wanted services
    package:
      name: ['autoconf',
             'build-essential',
             'bundler',
             'cron',
             'curl',
             'git',
             'git-core',
             'keepalived',
             'libsqlite3-dev',
             'libreadline-dev',
             'libssl-dev',
             'libxml2-dev',
             'libxslt1-dev',
             'libyaml-dev',
             'logrotate',
             'netatalk',
             'nginx',
             'screen',
             'sqlite3',
             'tmux',
             'ufw',
             'uuid-dev',
             'xrdp',
             'xz-utils']
      state: installed

#First I added the key for the LTS version to my repository
#
#wget -q -O - http://pkg.jenkins-ci.org/debian-stable/jenkins-ci.org.key | sudo apt-key add -
#Then I updated /etc/apt/sources.list: adding this line to the top of the file
#
#deb http://pkg.jenkins-ci.org/debian-stable binary/
#Updated the local package index, then finally install Jenkins:
#
#sudo apt-get update
#sudo apt-get install jenkins

  - name: Check if anything needs autoremoving
    shell: apt-get -y --dry-run autoremove | grep -q "0 to remove"
    register: check_autoremove
    ignore_errors: True
    changed_when: False
    check_mode: no

  - name: Autoremove unused packages
    command: apt-get -y autoremove
    when: "check_autoremove.rc != 0"

  - name: FW Allow everything
    ufw: state=enabled policy=allow direction=incoming

  - name: UFW allow SSH
    ufw: rule=allow name={{item}}
    with_items:
      - OpenSSH

  - name: Create a user
    user: name={{item}} comment="A user" generate_ssh_key=yes ssh_key_bits=2048 state=present password={{password}} shell=/bin/bash
    with_items:
      - "{{user}}"

  - name: Set up ssh config file
    copy: src=ssh_config dest=/home/{{item}}/.ssh/config owner={{item}}
    with_items:
      - "{{user}}"

  - name: Copy ssh keys to the user's .ssh directory
    copy: src=ita.pub dest=/home/{{item}}/.ssh/authorized_keys mode=0700 owner={{item}} group={{item}}
    with_items:
      - "{{user}}"

  - name: Set {{user}} as sudoer
    lineinfile: dest=/etc/sudoers line="{{item}} ALL=(ALL) NOPASSWD:ALL"
    with_items:
      - "{{user}}"

  - name: Set vi preferences
    copy: src=vimrc dest=/home/{{item}}/.vimrc owner={{item}}
    with_items:
      - "{{user}}"

  - name: Set bash preferences
    copy: src=bash_profile dest=/home/{{item}}/.bash_profile owner={{item}}
    with_items:
      - "{{user}}"

  - name: Set git preferences
    copy: src=gitconfig dest=/home/{{item}}/.gitconfig owner={{item}}
    with_items:
      - "{{user}}"

  - name: Set git ignore
    copy: src=gitignore dest=/home/{{item}}/.gitignore_global owner={{item}}
    with_items:
      - "{{user}}"

  - name: Make sure user is part of plugdev
    user: name={{item}} groups="plugdev"
    with_items:
      - "{{user}}"

  - name: Copy bitbucket ssh keys to the user's .ssh directory
    copy: src=~/.ssh/id_rsa_bitbucket dest=/home/{{item}}/.ssh/id_rsa_bitbucket
    with_items:
      - "{{user}}"

  - name: Copy github ssh keys to the user's .ssh directory
    copy: src=~/.ssh/id_rsa dest=/home/{{item}}/.ssh/id_rsa_github
    with_items:
      - "{{user}}"

  - name: Set up samba sharing
    action: template src=smb.conf dest=/etc/samba
    notify: Restart samba
